---
title: "Package overview"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Package overview}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>", out.width = "100%",
  message = FALSE, warning = FALSE, error = FALSE
)
library(eia)
options(eia_antidos = 0)
```

This vignette provides a brief overview of the most important functions in `eia`.
Other vignettes go into greater depth on specific topics and API endpoints.

## API key

### Register a key with EIA

Obtaining an API key is easy, and free!

Pulling data from the US Energy Information Administration (EIA) API requires a
registered API key. A key can be obtained at no cost [here](https://www.eia.gov/opendata/register.php).
A valid email and agreement to the API Terms of Service is required to obtain a key.

It is important to store the API key somewhere secure. Do not commit it to a repository
or otherwise share it. For example, one option is to store it in the `.Renviron` file.

### Key storage and retrieval

While the `key` argument can be provided to every API function call, it is not necessary.
There are "get" and "set" helpers available to make using `eia` functions a more seamless experience.

`eia_set_key()` provides the option of storing the key for the duration of the R session.

```{r key1, eval=FALSE}
library(eia)
# eia_set_key("yourkey")
# eia_get_key() # retrieve it
```

If the key already exists in the system environment and the plan is to pass `key`
to functions explicitly, then start as follows.

```{r key2, eval=FALSE}
key <- Sys.getenv("EIA_KEY")
# or:
key <- eia_get_key()
```

In general, however, if the key is set globally - such as in `.Renviron` - then
no further action regarding the key is required when using the package. See the vignette
on API details for more information about all the available options for key storage.

## EIA directory

Once the fully registered EIA API key is obtained and properly stored in the active R session,
by whichever method preferred, the ability to explore the API directory (folder structure)
and obtain the data within is set.

Note, the EIA's APIv2 has been redesigned to be more human-readable friendly; and,
rather than rely on numeric ID values, it is now built around a self-searchable
folder structure where the ID values are now just natural language, i.e. words.

Here is the top-level directory information:

```{r dir1}
eia_dir()
```

Navigate deeper into this directory by supplying a folder id (e.g. id = "electricity").

```{r dir2}
eia_dir("electricity")
```

And, because APIv2 is a directory listing, to go any deeper simply requires
appending the next id (folder name) separated by `"/"`, where the first folder ID
in from the top-level directory is "electricity" and the next deeper folder ID
from there is "retail-sales". As a result, supply "electricity/retail-sales" to
the first argument in `eia_dir()`, as shown below, to see the next next layer in.

```{r dir3}
eia_dir("electricity/retail-sales")
```

Finally, the end of the directory path has been reached, as shown by the message
provided in the console output above; i.e. there are no more sub-folders to explore.
This message is prompting to explore the available data at the end of this directory
path with `eia_metadata()`.

### Note on output format

The default is to return tidy data in a tibble data frame. For `eia_dir()`,
set `tidy = FALSE` to return a list as returned by `jsonlite::fromJSON`.
Additionally, set `tidy = NA` to return a raw character string of the JSON payload.

```{r dir4}
eia_dir(tidy = FALSE)

eia_dir(tidy = NA)
```

## EIA metadata

Now back to the example regarding the Retail Sales of Electricity...

`eia_metadata()` provides as the name suggests: metadata on a given set of data
provided by a terminal (i.e. final) directory path. This includes the following:

* Name
* Description
* Data values (i.e. column names)
* Facets (i.e. filter options)
  * e.g. filter on State = "OH" and Sector = "RES" (residential)
* Frequencies (i.e. available time denominations)
  * e.g. monthly, quarterly, annual, etc.
* Defaults
  * e.g. default date format and frequency
* Date range

```{r metadata}
eia_metadata("electricity/retail-sales")
```

## EIA data

### Data structure

The metadata from above can be used to have a better understanding of what data
is available and how that data can be pulled from the API using `eia_data()`.
However, simply supplying the above directory path from above ("electricity/retail-sales")
will only provide the data structure, i.e. no meaningful data values will be present
(more on this below).

```{r data1}
eia_data("electricity/retail-sales") |> head()
```

Note the console warning that appears. The API can only provide a maximum of 5000
records. If there are more data available than returned, a warning message like above
will be provided informing the user of their "incomplete return".

### Data values

"Data Values" are just the names of the columns that hold the specific, respective data value.
For this example, the overall number of power units sold to customers is of main interest,
and the associated column name for this information is `"sales"`.

To get data values, e.g. sales, supply the proper column name id, as provided in
the Data Values section of the `eia_metadata()` console output, again, in this case `"sales"`.

```{r data2}
eia_data("electricity/retail-sales", data = "sales", length = 6) # length = 6 instead of `|> head()`
```

See now that sales data values have been right-column-bound to the data structure
as originally provided by `eia_data("electricity/retail-sales")`.

## EIA facets

### Getting facet values

But what if data is wanted for just one sector, say "residential"?
This is where facets arrive, and for any given terminal directory, the facet values
can be found with `eia_facets()` by supplying the terminal directory path and facet id,
the latter of which can, again, be found from the console output of `eia_metadata()`.

```{r facets}
eia_facets("electricity/retail-sales", "sectorid")
# or
eia_facets("electricity/retail-sales", "stateid")
```

The above output provides the ids for both the State/Region and Sector that will
be required for obtaining Retail Sales for Residential customers in Vermont.

  * `"stateid"` for Vermont is "VT"
  * `"sectorid"` for residential is "RES"

### Using facet values

Now, the ID values from the above output can be used to further limit the
returned data with the `facets` argument in `eia_data()`.

```{r data3}
eia_data(
  dir = "electricity/retail-sales",
  data = "sales",
  facets = list(sectorid = "RES", stateid = "VT"),
  length = 6
)
```

If multiple data values (sales *and* price) or facets (residential *and* commercial)
are of interest, simply concatenate these entries with `c()`, as shown below:

```{r data4}
eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(sectorid = c("RES", "COM"), stateid = "VT"),
  length = 6
)
```

## Frequency-, time-subsetting, and sorting

This electric retail sales data is available in multiple frequencies and
for a defined date range, as shown below:

```{r time, echo=FALSE}
r <- eia_metadata("electricity/retail-sales", tidy = FALSE)
f <- r$response$frequency
f$format <- gsub('"', "", f$format)
cat("Frequency:\n")
f
cat("\nDate Range:\n  ", r$response$startPeriod, "to", r$response$endPeriod)
```

The default frequency for this data is monthly, but maybe annualized data for a
truncated time frame - say the last five years - is all that is needed. The ability
to alter the granularity or truncate time frame of the returned data is provided
by the `freq`, `start`, and `end` arguments of `eia_data()`.

```{r data5}
eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(sectorid = c("RES", "COM"), stateid = "VT"),
  freq = "annual",
  start = "2013",
  end = "2023"
)
```

As shown above, the returned data frame has 20 records - 10 annual observations for
each sector (residential and commercial). However, notice the hectic ordering of
the returned data. Thankfully, the API service can sort this in either ascending
or descending order using the `sort` argument.

Similar to `facets`, `sort` requires a named list object with two components:

  * `"cols"` - a list of column names on which to sort.
  * `"order"` - a single character value, either "asc" or "desc" for
  ascending and descending, respectively.

```{r data6}
eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(sectorid = c("RES", "COM"), stateid = "VT"),
  freq = "annual",
  start = "2013",
  end = "2023",
  sort = list(cols = c("period", "sectorid"), ordr = "asc")
)
```

---
title: "EIA data"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{EIA time series data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

## Finding the desired data

Like directory information, data is obtained based on a terminal directory path.
A complete example includes finding the ID for the series if you do not already know it.
Chances are you may already know the series IDs you need after using the API explorer on the EIA website.
Below, look for total electricity consumption.

```{r setup}
library(eia)
# eia_set_key("yourkey") # set API key if not already set globally
eia_dir()
```
Let's take a closer look at the Electricity directory.

```{r elec}
eia_dir("electricity")
```

There are six sub-folders within the electricity directory.
Using Retail Sales as an example, let's see what sub-folders are available there.

```{r sales}
eia_dir("electricity/retail-sales")
```

At this point, we've been informed that we've reached the end of the directory path;
i.e. the terminal directory within which there are data to be had. To better understand
what data is available here and how it can be obtained, we have been prompted to use
`eia::eia_metadata("electricity/retail-sales")`.

```{r metadata}
eia::eia_metadata("electricity/retail-sales")
```

The console output of `eia_metadata()`, above, provides a brief description, available data
values (data column names), facet ids for filtering, available time frequencies, a
set of default values for formats and frequency, and finally the full time range
of available data.

### Data Values

"Data Values" are just the names of the columns that hold the specific, respective data value.
In this example, we are interested in the overall number of power sold to customers.
The associated column name for this is `"sales"`.

### Facet filtering

But what if we only want `"sales"` for residential customers in Vermont?
This is where `facets` come in, and we can obtain specific values for facets by
way of `eia_facets`.

Remember, `eia_metadata()` provided us with the facet ids (`"stateid"`, `"sectorid"`)
needed to obtain the facet values.

```{r facets}
# State / Region
eia_facets("electricity/retail-sales", "stateid")

# Sector
eia_facets("electricity/retail-sales", "sectorid")
```

The above output provides the ids for both the State/Region and Sector that will
be required for obtaining Retail Sales for Residential customers in Vermont.

  * `"stateid"` for Vermont is "VT"
  * `"sectorid"` for residential is "RES"

## Getting data

### Data values and facet subsetting

From the Data Values (column names) and Facet IDs obtained above, we can now
effectively create a query with `eia_data()` to get just that.

Note that the `facets` argument requires a named list with the proper facet IDs
discovered above.

```{r data1}
eia_data(
  dir = "electricity/retail-sales",
  data = "sales",
  facets = list(stateid = "OH", sectorid = "RES")
)
```

But what if we want both sales and price?
Further, what if we also want multiple sectors, say, residential and commercial?
We can simply concatenate these entries with `c()`

```{r data2}
(d <- eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(stateid = "OH", sectorid = c("RES", "COM"))
))
```

### Frequency, time subsetting, and sorting

This electric retail sales data is available in multiple frequencies and
for a defined date range, as shown below:

```{r time, echo=FALSE}
r <- eia_metadata("electricity/retail-sales", tidy = FALSE)
f <- r$response$frequency
f$format <- gsub('"', "", f$format)
cat("Frequency:\n")
f
cat("\nDate Range:\n  ", r$response$startPeriod, "to", r$response$endPeriod)
```

The default frequency for this data is monthly, but maybe we only want annualized
data for a truncated time frame, say the last five years. We can do that with the
`start`, `end`, and `freq` arguments of `eia_data()`.

```{r data3}
eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(stateid = "OH", sectorid = c("RES", "COM")),
  freq = "annual",
  start = "2013",
  end = "2023"
)
```

As you can see, we get back a data frame with 10 annual observations, two for
each sector (residential and commercial). However, you may have also noticed the
hectic ordering of the returned data. Thankfully, we can have the API service sort
this in either ascending or descending order using the `sort` function argument.

Similar to `facets`, `sort` requires a named list object with two components:

  * `"cols"` will contain a list of column names by which to order.
  * `"ordr"` requires a single character, the value of which can be either "asc" or "desc"
  for ascending and descending, respectively.

```{r data4}
eia_data(
  dir = "electricity/retail-sales",
  data = c("sales", "price"),
  facets = list(stateid = "OH", sectorid = c("RES", "COM")),
  freq = "annual",
  start = "2013",
  end = "2023",
  sort = list(cols = c("period", "sectorid"), ordr = "asc")
)
```
